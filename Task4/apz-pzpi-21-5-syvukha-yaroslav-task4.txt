1 ОПИС АРХІТЕКТУРИ КЛІЄНТСЬКОЇ ЧАСТИНИ
     
	Для написання клієнтської частини системи було обрано мову програмування TypeScript з використанням технології React, що забезпечує високу швидкодію розробки і зручність у використанні за рахунок статичної типізації та функціонального підходу.
	Для реалізації елементів інтерфейсу було використано бібліотеки Styled Components та Tailwind, які надають зручну можливість написання стилей для компонентів. Styled Components бібліотека яка дає можливість одразу компоненти зі стилями, і після чого перевикористовувати. Поки Tailwind надає можливість швидкого написання стилей одразу на компоненті.
	Для реалізації локалізації інтерфейсу було використано бібліотеку i18next, що дозволяє легко і ефективно впроваджувати багатомовний інтерфейс та забезпечує зручний механізм перекладу текстових рядків. Для інтернаціоналізації часу використовується вбудований в JavaScript тип дат, який має можливість показувати формат дат відповідно до регіону користувача.
	Для реалізації навігації по сайту використано бібліотеку react-router-dom, яка надає зручні та потужні інструменти для створення реактивної навігації та управління маршрутами веб-додатку та історією цих маршрутів.
	Для виконання асинхронних запитів на сервер використано бібліотеку axios, яка забезпечує зручний та потужний інтерфейс для взаємодії з HTTP-запитами та дозволяє легко обробляти відповіді від сервера.
	Для розгортання серверу використано інструмент компілювання Vite, який надає швидкий та ефективний спосіб розгортання веб-додатків, дозволяючилегко налаштовувати середовище розробки та підтримує автоматичне оновлення в реальному часі. Для візуалізації використаних пакетів було розроблено діаграму пакетів (див. рис. 1).
	Проект використовує «Module Architecture». Головна ідея цієї архітектури, в можливості перевикористання написаних модулей, а майбутніх проектах, з мінімальною потребою у перенаписанні коду. Але все одно вона має задатки також на шарову архітектуру, через чітке розділення на шари в середині модулей. Проект має такі директорії: Hooks, Components, Pages, Types, Models, Utils, Modules. 
	Кожна з цих директорій зберігає невеличкі частини коду які використовуються в модулях. В рages зберігаються сторінки між якими буде переходити користувач. Саме ці сторінки використовують в собі контейнери з modules, які вже і визначають якусь логіку. Ці контенери розбиті по модулям за призначенням. Деякі мають тільки функціональне використання, як авторизаційний та локалізований модулі, так і структурне призначення, де вже і є написані частини сторінок з функціоналом. Саме ці модулі вже використовують код з components, types, utils, hooks та інших директорій.
	Усі конфіденційні дані передаються за допомогою шифрування ключем, без якого неможливо дізнатися що за інформація там лежить.
	Для більш детальної візуалізації архітектури системи було розроблено діаграму компонентів (див. додат. Б.1).

2 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ
     
	Користувачами клієнтської частини розробленої системи є 2 типи акторів: адміністратор та клієнт.
	Основними потребами клієнта є: можливість перегляду доступних йому документів, додавання ще не існуючих документів, а також редагування та видалення їх. При перегляданні користувач також має мати можливість легкого завантажування цих документів до свого пристрою. Ще користувач може бути частиною організації, і він також має можливість редагування даних своєї організації, а також взаємодія з данними якими володіє організація (редагування, видалення, завантаження).
	Основними потребами адміністратора є: можливість перегляду стану всієї системи, тобто організації, користувачів, документів. А також можливість редагування цих даних(адміністрування), зміна даних користувачів, зміна даних організації та документів. А також видалення з цих таблиць. Крім того вони мають мати можливість створення резервних копій даних системи.
	Взаємодію кожної ролі користувачів з клієнтською частиною системи представлено на діаграмі прецедентів (див. додат. А.1).
	Таким чином, за допомогою діаграми прецедентів було визначено функціональні потреби та взаємодію різних типів користувачів із системою.

3 ПОБУДОВА ДІАГРАМИ ПАКЕТІВ
 
	Для написання клієнтської частини системи було обрано мову програмування TypeScript з використанням технології React, що забезпечує високу швидкодію розробки і зручність у використанні за рахунок статичної типізації та функціонального підходу.
	Для реалізації елементів інтерфейсу було використано бібліотеки Styled Components та Tailwind, які надають зручну можливість написання стилей для компонентів. Styled Components бібліотека яка дає можливість одразу компоненти зі стилями, і після чого перевикористовувати. Поки Tailwind надає можливість швидкого написання стилей одразу на компоненті.
	Для реалізації локалізації інтерфейсу було використано бібліотеку i18next, що дозволяє легко і ефективно впроваджувати багатомовний інтерфейс та забезпечує зручний механізм перекладу текстових рядків. Для інтернаціоналізації часу використовується вбудований в JavaScript тип дат, який має можливість показувати формат дат відповідно до регіону користувача.
	Для реалізації навігації по сайту використано бібліотеку react-router-dom, яка надає зручні та потужні інструменти для створення реактивної навігації та управління маршрутами веб-додатку та історією цих маршрутів.
	Для виконання асинхронних запитів на сервер використано бібліотеку axios, яка забезпечує зручний та потужний інтерфейс для взаємодії з HTTP-запитами та дозволяє легко обробляти відповіді від сервера.
	Для розгортання серверу використано інструмент компілювання Vite, який надає швидкий та ефективний спосіб розгортання веб-додатків, дозволяючилегко налаштовувати середовище розробки та підтримує автоматичне оновлення в реальному часі. Для візуалізації використаних пакетів було розроблено діаграму пакетів (див. рис. 1).


4 ПОБУДОВА ДІАГРАМИ КОМПОНЕНТІВ
 
	Проект використовує «Module Architecture». Головна ідея цієї архітектури, в можливості перевикористання написаних модулей, а майбутніх проектах, з мінімальною потребою у перенаписанні коду. Але все одно вона має задатки також на шарову архітектуру, через чітке розділення на шари в середині модулей. Проект має такі директорії: Hooks, Components, Pages, Types, Models, Utils, Modules. 
	Кожна з цих директорій зберігає невеличкі частини коду які використовуються в модулях. В рages зберігаються сторінки між якими буде переходити користувач. Саме ці сторінки використовують в собі контейнери з modules, які вже і визначають якусь логіку. Ці контенери розбиті по модулям за призначенням. Деякі мають тільки функціональне використання, як авторизаційний та локалізований модулі, так і структурне призначення, де вже і є написані частини сторінок з функціоналом. Саме ці модулі вже використовують код з components, types, utils, hooks та інших директорій.

5 ПОБУДОВА ДІАГРАМИ ВЗАЄМОДІЇ

	Взаємодія користувача з клієнтською частиною починається з введення даних профілю (при реєстрації або входу). Після авторизації, згідно ролі користувача, взаємодія розділяється на клієнтську та адміністраторську.
	Клієнт має можливість переглядати доступні йому документи, редагувати та видаляти їх. При перегляданні він має можливість завантажування на власний пристрії. Також якщо він є частиною організації, він може редагувати та видаляти дані тієї організації.
	Адміністратор має можливість повного контролю всієї системи. Він може редагувати, додавати, та видаляти дані з системи таблиць Користувачів, Документів та Організації. Йому також надана можливість експортування та імпортуванні даних системи за допомогою зовнішнього сервісу.
	Для більш детальної візуалізації взаємодії користувачів з клієнтської частиною системи було розроблено діаграму взаємодії (див. додат. В.1).

ВИСНОВКИ

	У ході виконання лабораторної роботи були отримані навички з проєктування клієнтської частини програмної системи. Результатом роботи є розроблена програмна реалізація клієнтської частини програмної системи з використанням React. При розробці продукту дотримувались вимоги до чистого коду мови програмування Typescript.